{"filter":false,"title":"vending_machine.py","tooltip":"/vending_machine.py","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":5,"column":0},"end":{"row":22,"column":17},"action":"remove","lines":["usa_coins = {100: 20, 50: 20, 25: 20, 10: 20, 5: 20, 1: 20}","euro_coins = {200: 20, 100: 20, 50: 20, 20: 20, 10: 20, 5: 20, 2: 20, 1: 20}","","","def get_change(amount, coins=euro_coins):","    #if amount == 0:","    #    return []","        ","    #if amount in coins:","    #    return [amount]","        ","    change = []","    for coin in coins:","        while coin <= amount:","            amount -= coin","            change.append(coin)","        ","    return change"],"id":2},{"start":{"row":5,"column":0},"end":{"row":44,"column":17},"action":"insert","lines":["\"\"\"","Solution to the first challenge in the `Walkthrough Projects: Vending ","Machine - Part Two` unit  found in the `Test Driven Development with Python","lesson`","NOTE: The solution found in this file is one of the many potential solutions","that can be used to achieve the end result expected by the challenge in the","lesson.","\"\"\"","from byotest import *","","# Create a dictionary with denomination of coin and its quantity as key, value","usd_coins = {100: 20, 50: 20, 25: 20, 10: 20, 5: 20, 1: 20}","eur_coins = {200: 20, 100: 20, 50: 20, 20: 20, 10: 20, 5: 20, 2: 20, 1: 20}","","","def get_change(amount, coins=eur_coins):","    \"\"\"","    Takes the payment amount and returns the change","    `amount` the amount of money that we need to provide change for","    `coins` is the set of coins that we need to get change for (i.e. the set","        of available coins)","    Returns a list of coin values","    \"\"\"","    change = []","    ","    # Unlike a list, looping through a dictionary does not keep the order.","    # Therefore we use `sorted()` to sort the order. This will sstart with the","    # lowest by default, so we use `reverse=True` to start with the highest","    # denomination. The `while` ends when the domination quantity reaches 0.","    # An exception is thrown if there are insufficient coins to give change.","    for denomination in sorted(coins.keys(), reverse=True):","        while denomination <= amount and coins[denomination] > 0:","            amount -= denomination","            coins[denomination] -= 1","            change.append(denomination)","    ","    if amount != 0:","        raise Exception(\"Insufficient coins to give change.\")","","    return change"]}],[{"start":{"row":64,"column":32},"end":{"row":64,"column":33},"action":"remove","lines":["a"],"id":3}],[{"start":{"row":64,"column":32},"end":{"row":64,"column":33},"action":"insert","lines":["d"],"id":4}],[{"start":{"row":46,"column":0},"end":{"row":67,"column":41},"action":"remove","lines":["test_are_equal(get_change(0),[])","test_are_equal(get_change(1),[1])","test_are_equal(get_change(2),[2])","test_are_equal(get_change(5),[5])","test_are_equal(get_change(10),[10])","test_are_equal(get_change(20),[20])","test_are_equal(get_change(50),[50])","test_are_equal(get_change(100),[100])","test_are_equal(get_change(3), [2, 1])","test_are_equal(get_change(4), [2, 2])","test_are_equal(get_change(6), [5, 1])","test_are_equal(get_change(7), [5, 2])","test_are_equal(get_change(8), [5, 2, 1])","test_are_equal(get_change(11), [10, 1])","test_are_equal(get_change(12), [10, 2])","test_are_equal(get_change(13), [10, 2, 1])","test_are_equal(get_change(14), [10, 2, 2])","test_are_equal(get_change(16), [10, 5, 1])","test_are_equal(get_change(35, usd_coins), [25,10])","test_are_equal(get_change(5, {2: 1, 1: 4}), [2, 1, 1, 1])","test_exception_was_raised(get_change, (5, {2: 1, 1: 2}),","    \"Insufficient coins to give change.\")"],"id":5},{"start":{"row":46,"column":0},"end":{"row":63,"column":24},"action":"insert","lines":["# Write our tests for our code","test_are_equal(get_change(0), [])","test_are_equal(get_change(1), [1])","test_are_equal(get_change(2), [2])","test_are_equal(get_change(5), [5])","test_are_equal(get_change(10), [10])","test_are_equal(get_change(20), [20])","test_are_equal(get_change(50), [50])","test_are_equal(get_change(100), [100])","test_are_equal(get_change(3), [2, 1])","test_are_equal(get_change(7), [5, 2])","test_are_equal(get_change(9), [5, 2, 2])","test_are_equal(get_change(35, usd_coins), [25, 10])","test_are_equal(get_change(5, {2: 1, 1: 4}), [2, 1, 1, 1])","test_exception_was_raised(get_change, (5, {2: 1, 1: 2}),","    \"Insufficient coins to give change.\")","","print(\"All tests pass!\")"]}]]},"ace":{"folds":[],"scrolltop":60,"scrollleft":0,"selection":{"start":{"row":63,"column":24},"end":{"row":63,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":2,"state":"start","mode":"ace/mode/python"}},"timestamp":1574009089238,"hash":"3281569e6387d523ebef5e7265714eb8275ed7ee"}